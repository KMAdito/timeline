import de.adito.aditoweb.timeline.Timeline;import de.adito.aditoweb.timeline.values.TimelineInteger;import org.junit.Assert;import org.junit.Test;import java.util.concurrent.atomic.AtomicBoolean;import java.util.concurrent.atomic.AtomicInteger;import java.util.concurrent.atomic.AtomicLong;/** * Test fÃ¼r die Timeline * * @author k.mifka, 24.05.2018 */public class Test_Timeline{  private static final int tolerance = 10;  /**   * Testet, ob die gesetzte Dauer eingehalten wird   */  @Test  public void testDuration()  {    _testDuration(100);    _testDuration(1000);    _testDuration(5000);    _testDuration(10);    _testDuration(0);  }  /**   * Testet, ob die gesetzte Dauer pro Tick eingehalten wird   */  @Test  public void testTickDelay()  {    _testTickDelay(1000);    _testTickDelay(100);    _testTickDelay(400);    _testTickDelay(1);  }  private void _testTickDelay(long pTickDelay)  {    final int trials = 9;    AtomicLong startMilli = new AtomicLong(-1);    AtomicLong endMilli = new AtomicLong(-1);    AtomicBoolean end = new AtomicBoolean();    AtomicInteger count = new AtomicInteger();    Timeline timeline = new Timeline();    timeline.setDuration(pTickDelay * trials);    timeline.setTickDelay(pTickDelay);    timeline.addPlayListener(() -> startMilli.set(System.currentTimeMillis() - pTickDelay));    timeline.addTickFinishListener(() -> {      endMilli.set(System.currentTimeMillis());      if(timeline.getProgress() == 1)        end.set(true);    });    timeline.playForward();    while (!end.get())    {      while (endMilli.get() == -1)      {        //warten: Es wurde auf eine ressourcen schonendere Methode verzichtet, da es sich hier nur um einen Test handelt      }      int c = count.incrementAndGet();      long mDur = endMilli.get() - startMilli.get();      long diff = Math.abs(mDur - pTickDelay);      startMilli.set(endMilli.get());      endMilli.set(-1);      System.out.println("TickDelay " + c + " -> expected: " + pTickDelay + " measured: " + mDur + " difference: " + diff);      Assert.assertTrue(diff < tolerance);    }  }  private void _testDuration(long pDuration)  {    AtomicLong startMilli = new AtomicLong(-1);    AtomicLong endMilli = new AtomicLong(-1);    Timeline timeline = new Timeline();    timeline.setDuration(pDuration);    timeline.addPlayListener(() -> startMilli.set(System.currentTimeMillis()));    timeline.addStopListener(() -> endMilli.set(System.currentTimeMillis()));    timeline.playForward();    while (endMilli.get() == -1)    {      //warten: Es wurde auf eine ressourcen schonendere Methode verzichtet, da es sich hier nur um einen Test handelt    }    long mDur = endMilli.get() - startMilli.get();    long diff = Math.abs(mDur - pDuration);    System.out.println("Duration -> expected: " + pDuration + " measured: " + mDur + " difference: " + diff);    Assert.assertTrue(diff < tolerance);  }}